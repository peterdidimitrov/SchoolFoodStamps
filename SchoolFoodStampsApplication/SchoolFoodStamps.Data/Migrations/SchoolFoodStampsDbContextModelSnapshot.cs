// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolFoodStamps.Data;

#nullable disable

namespace SchoolFoodStamps.Data.Migrations
{
    [DbContext(typeof(SchoolFoodStampsDbContext))]
    partial class SchoolFoodStampsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ae67adef-86a9-4c12-affb-457f91a3ee8e"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c54c54be-ed07-4b13-8e24-23343d88fc79",
                            Email = "dimitrichko_admin@org.bg",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIMITRICHKO_ADMIN@ORG.BG",
                            NormalizedUserName = "DIMITRICHKO_ADMIN@ORG.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEEFZGEgnMq2Tb8uPlD5yoz0x9BIlhin0djbm6nU3v27lh0arVGMLuZr9Vo63K2gr3A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "EB84D1F5-9F6A-437A-9D07-F4F1EF3FF5AD",
                            TwoFactorEnabled = false,
                            UserName = "dimitrichko_admin@org.bg"
                        },
                        new
                        {
                            Id = new Guid("fec4e958-bf56-4247-a6c8-51fae40d852d"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d0d2f391-e512-4eae-96a8-004d8c526b49",
                            Email = "test@test.bg",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@TEST.BG",
                            NormalizedUserName = "TEST@TEST.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAECH7IteMKZP+P7gUOLk4fooy+bHp4EUGsLHQW/XaVfy+A9c70mBYlCY29ZgNjiBkaQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "A7EE88AB-FE1E-48F5-8A55-04D84EF0716A",
                            TwoFactorEnabled = false,
                            UserName = "test@test.bg"
                        },
                        new
                        {
                            Id = new Guid("97c32df3-7a02-49a9-871b-0b27c4c37cb5"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a65b8887-bc5c-4986-acea-38ac2554fa7c",
                            Email = "pesho@abv.bg",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PESHO@ABV.BG",
                            NormalizedUserName = "PESHO@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEGSxKF5QDopBCPuavKEJSqeOM6wPXqoj9LnnPm12ixq35vCNIxK3SrDP9WFVX1f80Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "C9DBC86A-10A1-41AD-9440-A5D49F1160A0",
                            TwoFactorEnabled = false,
                            UserName = "pesho@abv.bg"
                        },
                        new
                        {
                            Id = new Guid("7a40a6c8-b237-4c18-8272-4c8d21c4b5d0"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8013709b-e0a6-4657-8922-248a87c613e1",
                            Email = "patriarh.evtimi@abv.bg",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATRIARH.EVTIMI@ABV.BG",
                            NormalizedUserName = "PATRIARH.EVTIMI@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEFMN9CJtFZ1aW6Y5U9PJtkXHznr0NVtMQDCvQ+wXo3zmn7uq9CaRAItAUNwXXEQRxA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "90244B45-552C-4A44-B68D-58B001C20CF6",
                            TwoFactorEnabled = false,
                            UserName = "patriarh.evtimi@abv.bg"
                        },
                        new
                        {
                            Id = new Guid("d35e9b04-d31b-40f6-8d0d-da225a969421"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6eced55e-9440-42f0-8c96-fedeb4165571",
                            Email = "hristo.botev@abv.bg",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HRISTO.BOTEV@ABV.BG",
                            NormalizedUserName = "HRISTO.BOTEV@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEEdTqurKP79BMlBy5PWCExbGr665QOvjWiOR8oux/xQpPLz8PkPvzs3T16+PDb9EAw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "010D0205-1417-4C1D-9FCA-E7445D2328DD",
                            TwoFactorEnabled = false,
                            UserName = "hristo.botev@abv.bg"
                        },
                        new
                        {
                            Id = new Guid("f4e56355-18ae-42a7-b082-25a2cf382d3d"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3c1bf847-2e07-4616-a80a-b69cb67e66e8",
                            Email = "pesho@yahoo.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PESHO@YAHOO.COM",
                            NormalizedUserName = "PESHO@YAHOO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJRi5xX5hUu3DCpp/QNAnFAbUFP1nGPPcBQ5/pTSrGvdTIyI3NteiNcKSapUpRWBTA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6E893D2A-DFF6-4670-B658-94D9464CF6CC",
                            TwoFactorEnabled = false,
                            UserName = "pesho@yahoo.com"
                        },
                        new
                        {
                            Id = new Guid("4aa8654e-1465-4839-814c-a62a69d532e9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "83e30885-0087-4a6a-8532-bf8526ee02c2",
                            Email = "gosho@yahoo.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "GOSHO@YAHOO.COM",
                            NormalizedUserName = "GOSHO@YAHOO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJfMjI9iB67JUpZSXtFi1IsBjxt011EhE0cYefdsF4oduuikxTU/Ky0deRTMbh/OSw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "BC9AA79F-3F7C-4E7E-9B07-E702BC60613A",
                            TwoFactorEnabled = false,
                            UserName = "gosho@yahoo.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SchoolFoodStamps.Data.Models.Allergen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Allergens");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Gluten"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Dairy"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Eggs"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Fish"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Peanuts"
                        },
                        new
                        {
                            Id = 6,
                            Name = "SeeFood"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Soy"
                        },
                        new
                        {
                            Id = 8,
                            Name = "TreeNuts"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Wheat"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Celery"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Sulfites"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Lupin"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Sesame"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Mustard"
                        });
                });

            modelBuilder.Entity("SchoolFoodStamps.Data.Models.AllergenDish", b =>
                {
                    b.Property<int>("AllergenId")
                        .HasColumnType("int");

                    b.Property<int>("DishId")
                        .HasColumnType("int");

                    b.HasKey("AllergenId", "DishId");

                    b.HasIndex("DishId");

                    b.ToTable("AllergenDishes");
                });

            modelBuilder.Entity("SchoolFoodStamps.Data.Models.CateringCompany", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Catering company identifier");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Catering company address");

                    b.Property<string>("IdentificationNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Catering company Identification Number");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Catering company name");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Catering company phone number");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("User identifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CateringCompanies");

                    b.HasComment("Catering company table");

                    b.HasData(
                        new
                        {
                            Id = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            IdentificationNumber = "121756888",
                            Name = "ET SAM-DPD",
                            UserId = new Guid("fec4e958-bf56-4247-a6c8-51fae40d852d")
                        },
                        new
                        {
                            Id = new Guid("8e91e660-535c-4f3a-b2fb-cc4e28682345"),
                            IdentificationNumber = "121756889",
                            Name = "HealtyFoodForChildren",
                            UserId = new Guid("97c32df3-7a02-49a9-871b-0b27c4c37cb5")
                        });
                });

            modelBuilder.Entity("SchoolFoodStamps.Data.Models.Child", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Child identifier");

                    b.Property<string>("ClassLetter")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasComment("Child class letter in school");

                    b.Property<byte>("ClassNumber")
                        .HasColumnType("tinyint")
                        .HasComment("Child class number in school");

                    b.Property<DateTime?>("DateOfBirth")
                        .IsRequired()
                        .HasColumnType("datetime2")
                        .HasComment("Child date of birth");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Child first name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Child last name");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Parent identifier");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("School identifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Children");

                    b.HasComment("Child table");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1abc1d5-3718-4639-ab42-d7a1e9a0fcb0"),
                            ClassLetter = "B",
                            ClassNumber = (byte)3,
                            DateOfBirth = new DateTime(2010, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "John",
                            LastName = "Doe",
                            ParentId = new Guid("63281334-434e-4327-b1b7-84b32a9d3d82"),
                            SchoolId = new Guid("e3af4b8e-8f07-4962-838e-670bd305758f")
                        },
                        new
                        {
                            Id = new Guid("49d7ed09-30b0-4b52-b3d4-b2c7c318ccd1"),
                            ClassLetter = "A",
                            ClassNumber = (byte)1,
                            DateOfBirth = new DateTime(2012, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Jane",
                            LastName = "Doe",
                            ParentId = new Guid("63281334-434e-4327-b1b7-84b32a9d3d82"),
                            SchoolId = new Guid("e3af4b8e-8f07-4962-838e-670bd305758f")
                        },
                        new
                        {
                            Id = new Guid("69d5eefd-e902-4706-8bd8-b523bb24b9b6"),
                            ClassLetter = "B",
                            ClassNumber = (byte)1,
                            DateOfBirth = new DateTime(2014, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Jack",
                            LastName = "Doe",
                            ParentId = new Guid("fec4e958-bf56-4247-a6c8-51fae40d852d"),
                            SchoolId = new Guid("6cd00c11-b0cb-428a-9143-df5743105a92")
                        });
                });

            modelBuilder.Entity("SchoolFoodStamps.Data.Models.Dish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Dish identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("CateringCompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Catering company identifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Dish description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Dish name");

                    b.Property<double>("Weight")
                        .HasColumnType("float")
                        .HasComment("Dish weight");

                    b.HasKey("Id");

                    b.HasIndex("CateringCompanyId");

                    b.ToTable("Dishes");

                    b.HasComment("Dish table");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            Description = "Whole wheat bread filled with sliced turkey breast, lettuce, and low-fat cheese. Served with a side of cherry tomatoes and cucumber slices.",
                            Name = "Turkey and Cheese Sandwich",
                            Weight = 250.0
                        },
                        new
                        {
                            Id = 2,
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            Description = "Whole wheat pasta mixed with assorted chopped vegetables (such as bell peppers, cherry tomatoes, and broccoli). Tossed in a light Italian dressing.",
                            Name = "Vegetable Pasta Salad",
                            Weight = 200.0
                        },
                        new
                        {
                            Id = 3,
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            Description = "Mixed fruit salad (such as strawberries, grapes, and kiwi) served with a dollop of low-fat yogurt.",
                            Name = "Fruit Salad with Yogurt",
                            Weight = 150.0
                        },
                        new
                        {
                            Id = 4,
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            Description = "Grilled chicken strips, romaine lettuce, and Caesar dressing wrapped in a whole wheat tortilla. Served with a side of carrot sticks and hummus.",
                            Name = "Chicken Caesar Wrap",
                            Weight = 280.0
                        },
                        new
                        {
                            Id = 5,
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            Description = "Quinoa mixed with black beans, corn, diced bell peppers, and cilantro. Drizzled with a squeeze of lime juice.",
                            Name = "Quinoa and Black Bean Bowl",
                            Weight = 250.0
                        },
                        new
                        {
                            Id = 6,
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            Description = "Salad greens topped with cucumber slices, cherry tomatoes, feta cheese, and olives. Served with a side of whole grain pita bread.",
                            Name = "Greek Salad",
                            Weight = 200.0
                        },
                        new
                        {
                            Id = 7,
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            Description = "Whole wheat wrap filled with hummus, shredded carrots, spinach leaves, and sliced bell peppers. Served with a side of sugar snap peas.",
                            Name = "Hummus and Veggie Wrap",
                            Weight = 270.0
                        },
                        new
                        {
                            Id = 8,
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            Description = "Homemade vegetable soup (carrots, celery, onions, and beans) served with whole grain crackers on the side.",
                            Name = "Vegetable Soup with Whole Grain Crackers",
                            Weight = 300.0
                        },
                        new
                        {
                            Id = 9,
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            Description = "Slices of apple served with cheese cubes and whole grain crackers.",
                            Name = "Apple and Cheese Plate",
                            Weight = 200.0
                        },
                        new
                        {
                            Id = 10,
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            Description = "Halved bell peppers filled with tuna salad (made with canned tuna, light mayo, diced celery, and a dash of lemon juice). Served with a side of carrot sticks and ranch dressing for dipping.",
                            Name = "Tuna Salad Stuffed Bell Peppers",
                            Weight = 300.0
                        },
                        new
                        {
                            Id = 11,
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            Description = "Brown rice sushi rolls filled with cucumber, avocado, and cooked shrimp. Served with a side of edamame.",
                            Name = "Brown Rice Sushi Rolls",
                            Weight = 280.0
                        },
                        new
                        {
                            Id = 12,
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            Description = "Layers of low-fat yogurt, granola, and mixed berries.",
                            Name = "Yogurt Parfait",
                            Weight = 200.0
                        },
                        new
                        {
                            Id = 13,
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            Description = "Whole wheat tortillas filled with sautéed bell peppers, onions, spinach, and shredded cheese. Served with a side of salsa for dipping.",
                            Name = "Veggie and Cheese Quesadillas",
                            Weight = 250.0
                        },
                        new
                        {
                            Id = 14,
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            Description = "Roasted sweet potatoes mixed with black beans, corn, and diced red onions. Tossed in a lime vinaigrette dressing.",
                            Name = "Sweet Potato and Black Bean Salad",
                            Weight = 200.0
                        },
                        new
                        {
                            Id = 15,
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            Description = "Sliced cucumbers and cherry tomatoes tossed in a light balsamic vinaigrette dressing.",
                            Name = "Cucumber and Tomato Salad",
                            Weight = 150.0
                        },
                        new
                        {
                            Id = 16,
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            Description = "Grilled chicken and vegetable skewers (using cherry tomatoes, zucchini, and mushrooms). Served with a side of whole wheat couscous.",
                            Name = "Chicken and Veggie Skewers",
                            Weight = 250.0
                        },
                        new
                        {
                            Id = 17,
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            Description = "Whole wheat pita bread served with hummus and falafel balls. Accompanied by a side of sliced cucumbers and cherry tomatoes.",
                            Name = "Pita Bread with Hummus and Falafel",
                            Weight = 320.0
                        },
                        new
                        {
                            Id = 18,
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            Description = "Blend of mixed berries, low-fat yogurt, and a splash of orange juice.",
                            Name = "Mixed Berry Smoothie",
                            Weight = 300.0
                        },
                        new
                        {
                            Id = 19,
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            Description = "Whole wheat bread filled with egg salad (chopped hard-boiled eggs mixed with light mayo and mustard). Served with a side of carrot sticks and ranch dressing for dipping.",
                            Name = "Egg Salad Sandwich",
                            Weight = 250.0
                        },
                        new
                        {
                            Id = 20,
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            Description = "Quinoa mixed with diced mango, black beans, red bell peppers, and cilantro. Tossed in a honey-lime dressing.",
                            Name = "Mango and Black Bean Quinoa Salad",
                            Weight = 200.0
                        },
                        new
                        {
                            Id = 21,
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            Description = "Assorted cheese slices served with whole grain crackers and apple slices.",
                            Name = "Cheese and Crackers Plate",
                            Weight = 200.0
                        });
                });

            modelBuilder.Entity("SchoolFoodStamps.Data.Models.DishMenu", b =>
                {
                    b.Property<int>("DishId")
                        .HasColumnType("int");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.HasKey("DishId", "MenuId");

                    b.HasIndex("MenuId");

                    b.ToTable("DishMenus");
                });

            modelBuilder.Entity("SchoolFoodStamps.Data.Models.FoodStamp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Food stamp identifier");

                    b.Property<Guid>("CateringCompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Catering identifier");

                    b.Property<Guid>("ChildId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Child identifier");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2")
                        .HasComment("Food stamp expiry date");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2")
                        .HasComment("Food stamp issue date");

                    b.Property<int>("MenuId")
                        .HasColumnType("int")
                        .HasComment("Menu identifier");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Parent identifier");

                    b.Property<decimal>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(5.00m)
                        .HasComment("Food stamp price");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("Food stamp status");

                    b.Property<DateTime>("UseDate")
                        .HasColumnType("datetime2")
                        .HasComment("Food stamp use date");

                    b.HasKey("Id");

                    b.HasIndex("CateringCompanyId");

                    b.HasIndex("ChildId");

                    b.HasIndex("MenuId");

                    b.HasIndex("ParentId");

                    b.ToTable("FoodStamps");

                    b.HasComment("Food stamp table");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e3bcc07a-9a2f-4c54-8135-a5f1e21ed99d"),
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            ChildId = new Guid("a1abc1d5-3718-4639-ab42-d7a1e9a0fcb0"),
                            ExpiryDate = new DateTime(2024, 9, 16, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            IssueDate = new DateTime(2024, 3, 5, 8, 1, 45, 869, DateTimeKind.Utc).AddTicks(1328),
                            MenuId = 1,
                            ParentId = new Guid("63281334-434e-4327-b1b7-84b32a9d3d82"),
                            Price = 5.00m,
                            Status = 1,
                            UseDate = new DateTime(2024, 9, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("03c7dd57-8981-43af-ad5f-2a817214fb3e"),
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            ChildId = new Guid("49d7ed09-30b0-4b52-b3d4-b2c7c318ccd1"),
                            ExpiryDate = new DateTime(2024, 9, 17, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            IssueDate = new DateTime(2024, 3, 5, 8, 1, 45, 869, DateTimeKind.Utc).AddTicks(1336),
                            MenuId = 2,
                            ParentId = new Guid("63281334-434e-4327-b1b7-84b32a9d3d82"),
                            Price = 5.00m,
                            Status = 1,
                            UseDate = new DateTime(2024, 9, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("fb33981c-ae8c-48ea-bf27-3dc5a763d7f9"),
                            CateringCompanyId = new Guid("8e91e660-535c-4f3a-b2fb-cc4e28682345"),
                            ChildId = new Guid("69d5eefd-e902-4706-8bd8-b523bb24b9b6"),
                            ExpiryDate = new DateTime(2024, 9, 18, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            IssueDate = new DateTime(2024, 3, 5, 8, 1, 45, 869, DateTimeKind.Utc).AddTicks(1342),
                            MenuId = 3,
                            ParentId = new Guid("fec4e958-bf56-4247-a6c8-51fae40d852d"),
                            Price = 5.00m,
                            Status = 1,
                            UseDate = new DateTime(2024, 9, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SchoolFoodStamps.Data.Models.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Menu identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("CateringCompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Catering company identifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Menu date of creation");

                    b.Property<DateTime?>("DateOfModify")
                        .HasColumnType("datetime2")
                        .HasComment("Menu date of modify");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int")
                        .HasComment("Menu day of week");

                    b.HasKey("Id");

                    b.HasIndex("CateringCompanyId");

                    b.ToTable("Menus");

                    b.HasComment("Menu table");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            CreatedOn = new DateTime(2024, 3, 5, 8, 1, 45, 868, DateTimeKind.Utc).AddTicks(9399),
                            DayOfWeek = 1
                        },
                        new
                        {
                            Id = 2,
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            CreatedOn = new DateTime(2024, 3, 5, 8, 1, 45, 868, DateTimeKind.Utc).AddTicks(9404),
                            DayOfWeek = 2
                        },
                        new
                        {
                            Id = 3,
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            CreatedOn = new DateTime(2024, 3, 5, 8, 1, 45, 868, DateTimeKind.Utc).AddTicks(9405),
                            DayOfWeek = 3
                        },
                        new
                        {
                            Id = 4,
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            CreatedOn = new DateTime(2024, 3, 5, 8, 1, 45, 868, DateTimeKind.Utc).AddTicks(9407),
                            DayOfWeek = 4
                        },
                        new
                        {
                            Id = 5,
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            CreatedOn = new DateTime(2024, 3, 5, 8, 1, 45, 868, DateTimeKind.Utc).AddTicks(9409),
                            DayOfWeek = 5
                        },
                        new
                        {
                            Id = 6,
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            CreatedOn = new DateTime(2024, 3, 5, 8, 1, 45, 868, DateTimeKind.Utc).AddTicks(9410),
                            DayOfWeek = 6
                        },
                        new
                        {
                            Id = 7,
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            CreatedOn = new DateTime(2024, 3, 5, 8, 1, 45, 868, DateTimeKind.Utc).AddTicks(9483),
                            DayOfWeek = 0
                        });
                });

            modelBuilder.Entity("SchoolFoodStamps.Data.Models.Parent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Parent identifier");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Parent address");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Parent first name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Parent last name");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Parent phone number");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("User identifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Parents");

                    b.HasComment("Parent table");

                    b.HasData(
                        new
                        {
                            Id = new Guid("63281334-434e-4327-b1b7-84b32a9d3d82"),
                            Address = "Sofia, Bulgaria",
                            FirstName = "Petar",
                            LastName = "Ivanov",
                            PhoneNumber = "0888123456",
                            UserId = new Guid("f4e56355-18ae-42a7-b082-25a2cf382d3d")
                        },
                        new
                        {
                            Id = new Guid("fec4e958-bf56-4247-a6c8-51fae40d852d"),
                            Address = "Stara Zagora, Bulgaria",
                            FirstName = "Georgi",
                            LastName = "Petrov",
                            PhoneNumber = "0888123444",
                            UserId = new Guid("4aa8654e-1465-4839-814c-a62a69d532e9")
                        });
                });

            modelBuilder.Entity("SchoolFoodStamps.Data.Models.School", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("School identifier");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("School address");

                    b.Property<Guid>("CateringCompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Catering company identifier");

                    b.Property<string>("IdentificationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("School name");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("School phone number");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("User identifier");

                    b.HasKey("Id");

                    b.HasIndex("CateringCompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("Schools");

                    b.HasComment("School table");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e3af4b8e-8f07-4962-838e-670bd305758f"),
                            Address = "bul. Hristo Botev 41",
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            IdentificationNumber = "121756886",
                            Name = "41 OU Patriarh Evtimii",
                            PhoneNumber = "02 987 6543",
                            UserId = new Guid("7a40a6c8-b237-4c18-8272-4c8d21c4b5d0")
                        },
                        new
                        {
                            Id = new Guid("6cd00c11-b0cb-428a-9143-df5743105a92"),
                            Address = "bul. Al. Stamboliiski 33",
                            CateringCompanyId = new Guid("8e91e660-535c-4f3a-b2fb-cc4e28682345"),
                            IdentificationNumber = "121756787",
                            Name = "51 SOU Hristo  Botev",
                            PhoneNumber = "02 987 4243",
                            UserId = new Guid("d35e9b04-d31b-40f6-8d0d-da225a969421")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolFoodStamps.Data.Models.AllergenDish", b =>
                {
                    b.HasOne("SchoolFoodStamps.Data.Models.Allergen", "Allergen")
                        .WithMany("AllergensDishes")
                        .HasForeignKey("AllergenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolFoodStamps.Data.Models.Dish", "Dish")
                        .WithMany("AllergensDishes")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Allergen");

                    b.Navigation("Dish");
                });

            modelBuilder.Entity("SchoolFoodStamps.Data.Models.CateringCompany", b =>
                {
                    b.HasOne("ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SchoolFoodStamps.Data.Models.Child", b =>
                {
                    b.HasOne("SchoolFoodStamps.Data.Models.Parent", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolFoodStamps.Data.Models.School", "School")
                        .WithMany("Children")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("School");
                });

            modelBuilder.Entity("SchoolFoodStamps.Data.Models.Dish", b =>
                {
                    b.HasOne("SchoolFoodStamps.Data.Models.CateringCompany", "Company")
                        .WithMany("Dishes")
                        .HasForeignKey("CateringCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("SchoolFoodStamps.Data.Models.DishMenu", b =>
                {
                    b.HasOne("SchoolFoodStamps.Data.Models.Dish", "Dish")
                        .WithMany("DishesMenus")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolFoodStamps.Data.Models.Menu", "Menu")
                        .WithMany("DishesMenus")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("SchoolFoodStamps.Data.Models.FoodStamp", b =>
                {
                    b.HasOne("SchoolFoodStamps.Data.Models.CateringCompany", "CateringCompany")
                        .WithMany("FoodStamps")
                        .HasForeignKey("CateringCompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolFoodStamps.Data.Models.Child", "Child")
                        .WithMany("FoodStamps")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolFoodStamps.Data.Models.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolFoodStamps.Data.Models.Parent", "Parent")
                        .WithMany("FoodStamps")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CateringCompany");

                    b.Navigation("Child");

                    b.Navigation("Menu");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("SchoolFoodStamps.Data.Models.Menu", b =>
                {
                    b.HasOne("SchoolFoodStamps.Data.Models.CateringCompany", "Company")
                        .WithMany("Menus")
                        .HasForeignKey("CateringCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("SchoolFoodStamps.Data.Models.Parent", b =>
                {
                    b.HasOne("ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SchoolFoodStamps.Data.Models.School", b =>
                {
                    b.HasOne("SchoolFoodStamps.Data.Models.CateringCompany", "Company")
                        .WithMany("Schools")
                        .HasForeignKey("CateringCompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SchoolFoodStamps.Data.Models.Allergen", b =>
                {
                    b.Navigation("AllergensDishes");
                });

            modelBuilder.Entity("SchoolFoodStamps.Data.Models.CateringCompany", b =>
                {
                    b.Navigation("Dishes");

                    b.Navigation("FoodStamps");

                    b.Navigation("Menus");

                    b.Navigation("Schools");
                });

            modelBuilder.Entity("SchoolFoodStamps.Data.Models.Child", b =>
                {
                    b.Navigation("FoodStamps");
                });

            modelBuilder.Entity("SchoolFoodStamps.Data.Models.Dish", b =>
                {
                    b.Navigation("AllergensDishes");

                    b.Navigation("DishesMenus");
                });

            modelBuilder.Entity("SchoolFoodStamps.Data.Models.Menu", b =>
                {
                    b.Navigation("DishesMenus");
                });

            modelBuilder.Entity("SchoolFoodStamps.Data.Models.Parent", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("FoodStamps");
                });

            modelBuilder.Entity("SchoolFoodStamps.Data.Models.School", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
