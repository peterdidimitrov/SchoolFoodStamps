// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace SchoolFoodStamps.Data.Migrations
{
    [DbContext(typeof(SchoolFoodStampsDbContext))]
    [Migration("20240415063152_AddIsActiveToStudentEntity")]
    partial class AddIsActiveToStudentEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ae67adef-86a9-4c12-affb-457f91a3ee8e"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9756bba7-48c5-473b-af16-be3a84c6333d",
                            Email = "dimitrichko_admin@org.bg",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIMITRICHKO_ADMIN@ORG.BG",
                            NormalizedUserName = "DIMITRICHKO_ADMIN@ORG.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEOBy5jhI/GlYdPc/vhnlo3NEcRdpIbo9+qeQbNfqIMHAqeluumv6fN2gCisHRfdhIA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "EBE3AECF-E164-4EE2-94C2-D69877E7A200",
                            TwoFactorEnabled = false,
                            UserName = "dimitrichko_admin@org.bg"
                        },
                        new
                        {
                            Id = new Guid("fec4e958-bf56-4247-a6c8-51fae40d852d"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4fc920f4-40d6-4faa-bc70-8997200978f7",
                            Email = "test@test.bg",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@TEST.BG",
                            NormalizedUserName = "TEST@TEST.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEFaivyu64OC10+GoIG914HAVxvDSYfZS7zrFTYAUwfVeHanHKeoqFfepMUcBEi4mcw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8A9D9181-7B8A-4DA2-B6E2-3C5C616F856F",
                            TwoFactorEnabled = false,
                            UserName = "test@test.bg"
                        },
                        new
                        {
                            Id = new Guid("97c32df3-7a02-49a9-871b-0b27c4c37cb5"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cb7442c3-e2d0-4203-94ab-487413bf308d",
                            Email = "pesho@abv.bg",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PESHO@ABV.BG",
                            NormalizedUserName = "PESHO@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEHvMCLUCTAt0PDXIehh02lzqodypjF/lhNay4WP/K+wwhjVLTj18dkZy2PIJZ+j00A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "031F3ED5-7D91-49FF-A611-512DF8D05BCE",
                            TwoFactorEnabled = false,
                            UserName = "pesho@abv.bg"
                        },
                        new
                        {
                            Id = new Guid("7a40a6c8-b237-4c18-8272-4c8d21c4b5d0"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "af54701a-2439-443f-a586-74c8b2faf518",
                            Email = "patriarh.evtimi@abv.bg",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATRIARH.EVTIMI@ABV.BG",
                            NormalizedUserName = "PATRIARH.EVTIMI@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEMZk/icTIaHKSAygewk5qcNp0QCny5dKGUlg5I0T3SO8YXL0XB83INOJAzYBVejBZg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "E2DE5A32-DD77-4FE3-BB0C-EC0E92D54C7A",
                            TwoFactorEnabled = false,
                            UserName = "patriarh.evtimi@abv.bg"
                        },
                        new
                        {
                            Id = new Guid("d35e9b04-d31b-40f6-8d0d-da225a969421"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c3a7f223-b36c-4838-8f4c-6f22b5ad9225",
                            Email = "hristo.botev@abv.bg",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HRISTO.BOTEV@ABV.BG",
                            NormalizedUserName = "HRISTO.BOTEV@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEEY5qX+QPBDSu6j7Y4Znc11FoAyJcAIMk2zRRU3yez8/Mg3nsFkSd4vZsXI2mv+FGA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0D310000-F682-4DF8-9B82-3BB80D4DB981",
                            TwoFactorEnabled = false,
                            UserName = "hristo.botev@abv.bg"
                        },
                        new
                        {
                            Id = new Guid("f4e56355-18ae-42a7-b082-25a2cf382d3d"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f71ca5b5-ec9c-42f5-bfe3-9fd0cb475c18",
                            Email = "pesho@yahoo.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PESHO@YAHOO.COM",
                            NormalizedUserName = "PESHO@YAHOO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDvUwVFIXsTPonPnS9z/pCRQJNNRLZwz6sNt6GAmU6OHdx6Iy9ZjizSkDIxJUTCgrA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "FA978BF0-A478-443A-87F9-39185AE8FFFA",
                            TwoFactorEnabled = false,
                            UserName = "pesho@yahoo.com"
                        },
                        new
                        {
                            Id = new Guid("4aa8654e-1465-4839-814c-a62a69d532e9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "703dc275-4821-4a47-b42b-8a295f840951",
                            Email = "gosho@yahoo.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "GOSHO@YAHOO.COM",
                            NormalizedUserName = "GOSHO@YAHOO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENvT4/pU8O2Q4RwSdaHfT54VH6zIvyTuD2K7rQ1ZsZVE261+0bYiVoNoH9CuOe270Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "C330A40C-66AC-46EC-A03F-7E6CC9A3A7AF",
                            TwoFactorEnabled = false,
                            UserName = "gosho@yahoo.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SchoolFoodStamps.Data.Models.Allergen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Allergens");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Gluten"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Dairy"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Eggs"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Fish"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Peanuts"
                        },
                        new
                        {
                            Id = 6,
                            Name = "SeeFood"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Soy"
                        },
                        new
                        {
                            Id = 8,
                            Name = "TreeNuts"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Wheat"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Celery"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Sulfites"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Lupin"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Sesame"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Mustard"
                        });
                });

            modelBuilder.Entity("SchoolFoodStamps.Data.Models.AllergenDish", b =>
                {
                    b.Property<int>("AllergenId")
                        .HasColumnType("int");

                    b.Property<int>("DishId")
                        .HasColumnType("int");

                    b.HasKey("AllergenId", "DishId");

                    b.HasIndex("DishId");

                    b.ToTable("AllergenDishes");
                });

            modelBuilder.Entity("SchoolFoodStamps.Data.Models.CateringCompany", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Catering company identifier");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Catering company address");

                    b.Property<string>("IdentificationNumber")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)")
                        .HasComment("Catering company Identification Number");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Catering company name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("User identifier");

                    b.HasKey("Id");

                    b.HasIndex("IdentificationNumber")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("CateringCompanies");

                    b.HasComment("Catering company table");

                    b.HasData(
                        new
                        {
                            Id = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            IdentificationNumber = "121756888",
                            Name = "ET SAM-DPD",
                            UserId = new Guid("fec4e958-bf56-4247-a6c8-51fae40d852d")
                        },
                        new
                        {
                            Id = new Guid("8e91e660-535c-4f3a-b2fb-cc4e28682345"),
                            IdentificationNumber = "121756889",
                            Name = "HealtyFoodForChildren",
                            UserId = new Guid("97c32df3-7a02-49a9-871b-0b27c4c37cb5")
                        });
                });

            modelBuilder.Entity("SchoolFoodStamps.Data.Models.Dish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Dish identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("CateringCompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Catering company identifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Dish description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Is active");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Dish name");

                    b.Property<double>("Weight")
                        .HasColumnType("float")
                        .HasComment("Dish weight");

                    b.HasKey("Id");

                    b.HasIndex("CateringCompanyId");

                    b.ToTable("Dishes");

                    b.HasComment("Dish table");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            Description = "Whole wheat bread filled with sliced turkey breast, lettuce, and low-fat cheese. Served with a side of cherry tomatoes and cucumber slices.",
                            IsActive = true,
                            Name = "Turkey and Cheese Sandwich",
                            Weight = 250.0
                        },
                        new
                        {
                            Id = 2,
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            Description = "Whole wheat pasta mixed with assorted chopped vegetables (such as bell peppers, cherry tomatoes, and broccoli). Tossed in a light Italian dressing.",
                            IsActive = true,
                            Name = "Vegetable Pasta Salad",
                            Weight = 200.0
                        },
                        new
                        {
                            Id = 3,
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            Description = "Mixed fruit salad (such as strawberries, grapes, and kiwi) served with a dollop of low-fat yogurt.",
                            IsActive = true,
                            Name = "Fruit Salad with Yogurt",
                            Weight = 150.0
                        },
                        new
                        {
                            Id = 4,
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            Description = "Grilled chicken strips, romaine lettuce, and Caesar dressing wrapped in a whole wheat tortilla. Served with a side of carrot sticks and hummus.",
                            IsActive = true,
                            Name = "Chicken Caesar Wrap",
                            Weight = 280.0
                        },
                        new
                        {
                            Id = 5,
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            Description = "Quinoa mixed with black beans, corn, diced bell peppers, and cilantro. Drizzled with a squeeze of lime juice.",
                            IsActive = true,
                            Name = "Quinoa and Black Bean Bowl",
                            Weight = 250.0
                        },
                        new
                        {
                            Id = 6,
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            Description = "Salad greens topped with cucumber slices, cherry tomatoes, feta cheese, and olives. Served with a side of whole grain pita bread.",
                            IsActive = true,
                            Name = "Greek Salad",
                            Weight = 200.0
                        },
                        new
                        {
                            Id = 7,
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            Description = "Whole wheat wrap filled with hummus, shredded carrots, spinach leaves, and sliced bell peppers. Served with a side of sugar snap peas.",
                            IsActive = true,
                            Name = "Hummus and Veggie Wrap",
                            Weight = 270.0
                        },
                        new
                        {
                            Id = 8,
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            Description = "Homemade vegetable soup (carrots, celery, onions, and beans) served with whole grain crackers on the side.",
                            IsActive = true,
                            Name = "Vegetable Soup with Whole Grain Crackers",
                            Weight = 300.0
                        },
                        new
                        {
                            Id = 9,
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            Description = "Slices of apple served with cheese cubes and whole grain crackers.",
                            IsActive = true,
                            Name = "Apple and Cheese Plate",
                            Weight = 200.0
                        },
                        new
                        {
                            Id = 10,
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            Description = "Halved bell peppers filled with tuna salad (made with canned tuna, light mayo, diced celery, and a dash of lemon juice). Served with a side of carrot sticks and ranch dressing for dipping.",
                            IsActive = true,
                            Name = "Tuna Salad Stuffed Bell Peppers",
                            Weight = 300.0
                        },
                        new
                        {
                            Id = 11,
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            Description = "Brown rice sushi rolls filled with cucumber, avocado, and cooked shrimp. Served with a side of edamame.",
                            IsActive = true,
                            Name = "Brown Rice Sushi Rolls",
                            Weight = 280.0
                        },
                        new
                        {
                            Id = 12,
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            Description = "Layers of low-fat yogurt, granola, and mixed berries.",
                            IsActive = true,
                            Name = "Yogurt Parfait",
                            Weight = 200.0
                        },
                        new
                        {
                            Id = 13,
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            Description = "Whole wheat tortillas filled with sautéed bell peppers, onions, spinach, and shredded cheese. Served with a side of salsa for dipping.",
                            IsActive = true,
                            Name = "Veggie and Cheese Quesadillas",
                            Weight = 250.0
                        },
                        new
                        {
                            Id = 14,
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            Description = "Roasted sweet potatoes mixed with black beans, corn, and diced red onions. Tossed in a lime vinaigrette dressing.",
                            IsActive = true,
                            Name = "Sweet Potato and Black Bean Salad",
                            Weight = 200.0
                        },
                        new
                        {
                            Id = 15,
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            Description = "Sliced cucumbers and cherry tomatoes tossed in a light balsamic vinaigrette dressing.",
                            IsActive = true,
                            Name = "Cucumber and Tomato Salad",
                            Weight = 150.0
                        });
                });

            modelBuilder.Entity("SchoolFoodStamps.Data.Models.DishMenu", b =>
                {
                    b.Property<int>("DishId")
                        .HasColumnType("int");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.HasKey("DishId", "MenuId");

                    b.HasIndex("MenuId");

                    b.ToTable("DishMenus");

                    b.HasData(
                        new
                        {
                            DishId = 1,
                            MenuId = 1
                        },
                        new
                        {
                            DishId = 2,
                            MenuId = 1
                        },
                        new
                        {
                            DishId = 3,
                            MenuId = 1
                        },
                        new
                        {
                            DishId = 4,
                            MenuId = 2
                        },
                        new
                        {
                            DishId = 5,
                            MenuId = 2
                        },
                        new
                        {
                            DishId = 6,
                            MenuId = 2
                        },
                        new
                        {
                            DishId = 7,
                            MenuId = 3
                        },
                        new
                        {
                            DishId = 8,
                            MenuId = 3
                        },
                        new
                        {
                            DishId = 9,
                            MenuId = 3
                        },
                        new
                        {
                            DishId = 10,
                            MenuId = 4
                        },
                        new
                        {
                            DishId = 11,
                            MenuId = 4
                        },
                        new
                        {
                            DishId = 12,
                            MenuId = 4
                        },
                        new
                        {
                            DishId = 13,
                            MenuId = 5
                        },
                        new
                        {
                            DishId = 14,
                            MenuId = 5
                        },
                        new
                        {
                            DishId = 15,
                            MenuId = 5
                        });
                });

            modelBuilder.Entity("SchoolFoodStamps.Data.Models.FoodStamp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Food stamp identifier");

                    b.Property<Guid>("CateringCompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Catering identifier");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2")
                        .HasComment("Food stamp expiry date");

                    b.Property<DateTime>("IssueDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Food stamp issue date");

                    b.Property<int>("MenuId")
                        .HasColumnType("int")
                        .HasComment("Menu identifier");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Parent identifier");

                    b.Property<decimal>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(5.00m)
                        .HasComment("Food stamp price");

                    b.Property<DateTime?>("RenewedDate")
                        .HasColumnType("datetime2")
                        .HasComment("Food stamp renewed date");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("School identifier");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("Food stamp status");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Student identifier");

                    b.HasKey("Id");

                    b.HasIndex("CateringCompanyId");

                    b.HasIndex("MenuId");

                    b.HasIndex("ParentId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("StudentId");

                    b.ToTable("FoodStamps");

                    b.HasComment("Food stamp table");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e3bcc07a-9a2f-4c54-8135-a5f1e21ed99d"),
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            ExpiryDate = new DateTime(2024, 9, 16, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            IssueDate = new DateTime(2024, 4, 15, 6, 31, 51, 735, DateTimeKind.Utc).AddTicks(3413),
                            MenuId = 1,
                            ParentId = new Guid("63281334-434e-4327-b1b7-84b32a9d3d82"),
                            Price = 5.00m,
                            SchoolId = new Guid("e3af4b8e-8f07-4962-838e-670bd305758f"),
                            Status = 1,
                            StudentId = new Guid("a1abc1d5-3718-4639-ab42-d7a1e9a0fcb0")
                        },
                        new
                        {
                            Id = new Guid("03c7dd57-8981-43af-ad5f-2a817214fb3e"),
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            ExpiryDate = new DateTime(2024, 9, 17, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            IssueDate = new DateTime(2024, 4, 15, 6, 31, 51, 735, DateTimeKind.Utc).AddTicks(3425),
                            MenuId = 2,
                            ParentId = new Guid("63281334-434e-4327-b1b7-84b32a9d3d82"),
                            Price = 5.00m,
                            SchoolId = new Guid("e3af4b8e-8f07-4962-838e-670bd305758f"),
                            Status = 1,
                            StudentId = new Guid("49d7ed09-30b0-4b52-b3d4-b2c7c318ccd1")
                        },
                        new
                        {
                            Id = new Guid("fb33981c-ae8c-48ea-bf27-3dc5a763d7f9"),
                            CateringCompanyId = new Guid("8e91e660-535c-4f3a-b2fb-cc4e28682345"),
                            ExpiryDate = new DateTime(2024, 9, 18, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            IssueDate = new DateTime(2024, 4, 15, 6, 31, 51, 735, DateTimeKind.Utc).AddTicks(3430),
                            MenuId = 3,
                            ParentId = new Guid("fec4e958-bf56-4247-a6c8-51fae40d852d"),
                            Price = 5.00m,
                            SchoolId = new Guid("6cd00c11-b0cb-428a-9143-df5743105a92"),
                            Status = 1,
                            StudentId = new Guid("69d5eefd-e902-4706-8bd8-b523bb24b9b6")
                        });
                });

            modelBuilder.Entity("SchoolFoodStamps.Data.Models.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Menu identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("CateringCompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Catering company identifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Menu date of creation");

                    b.Property<DateTime?>("DateOfModify")
                        .HasColumnType("datetime2")
                        .HasComment("Menu date of modify");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int")
                        .HasComment("Menu day of week");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Is active");

                    b.HasKey("Id");

                    b.HasIndex("CateringCompanyId");

                    b.ToTable("Menus");

                    b.HasComment("Menu table");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            CreatedOn = new DateTime(2024, 4, 15, 6, 31, 51, 735, DateTimeKind.Utc).AddTicks(497),
                            DayOfWeek = 1,
                            IsActive = true
                        },
                        new
                        {
                            Id = 2,
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            CreatedOn = new DateTime(2024, 4, 15, 6, 31, 51, 735, DateTimeKind.Utc).AddTicks(503),
                            DayOfWeek = 2,
                            IsActive = true
                        },
                        new
                        {
                            Id = 3,
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            CreatedOn = new DateTime(2024, 4, 15, 6, 31, 51, 735, DateTimeKind.Utc).AddTicks(506),
                            DayOfWeek = 3,
                            IsActive = true
                        },
                        new
                        {
                            Id = 4,
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            CreatedOn = new DateTime(2024, 4, 15, 6, 31, 51, 735, DateTimeKind.Utc).AddTicks(508),
                            DayOfWeek = 4,
                            IsActive = true
                        },
                        new
                        {
                            Id = 5,
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            CreatedOn = new DateTime(2024, 4, 15, 6, 31, 51, 735, DateTimeKind.Utc).AddTicks(511),
                            DayOfWeek = 5,
                            IsActive = true
                        });
                });

            modelBuilder.Entity("SchoolFoodStamps.Data.Models.Parent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Parent identifier");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Parent address");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Parent first name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Parent last name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("User identifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Parents");

                    b.HasComment("Parent table");

                    b.HasData(
                        new
                        {
                            Id = new Guid("63281334-434e-4327-b1b7-84b32a9d3d82"),
                            Address = "Sofia, Bulgaria",
                            FirstName = "Petar",
                            LastName = "Ivanov",
                            UserId = new Guid("f4e56355-18ae-42a7-b082-25a2cf382d3d")
                        },
                        new
                        {
                            Id = new Guid("fec4e958-bf56-4247-a6c8-51fae40d852d"),
                            Address = "Stara Zagora, Bulgaria",
                            FirstName = "Georgi",
                            LastName = "Petrov",
                            UserId = new Guid("4aa8654e-1465-4839-814c-a62a69d532e9")
                        });
                });

            modelBuilder.Entity("SchoolFoodStamps.Data.Models.School", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("School identifier");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("School address");

                    b.Property<Guid>("CateringCompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Catering company identifier");

                    b.Property<string>("IdentificationNumber")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)")
                        .HasComment("Catering company Identification Number");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("School name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("User identifier");

                    b.HasKey("Id");

                    b.HasIndex("CateringCompanyId");

                    b.HasIndex("IdentificationNumber")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Schools");

                    b.HasComment("School table");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e3af4b8e-8f07-4962-838e-670bd305758f"),
                            Address = "bul. Hristo Botev 41",
                            CateringCompanyId = new Guid("efd31b6c-2a3c-4989-824f-2387c9951234"),
                            IdentificationNumber = "121756886",
                            Name = "41 OU Patriarh Evtimii",
                            UserId = new Guid("7a40a6c8-b237-4c18-8272-4c8d21c4b5d0")
                        },
                        new
                        {
                            Id = new Guid("6cd00c11-b0cb-428a-9143-df5743105a92"),
                            Address = "bul. Al. Stamboliiski 33",
                            CateringCompanyId = new Guid("8e91e660-535c-4f3a-b2fb-cc4e28682345"),
                            IdentificationNumber = "121756787",
                            Name = "51 SOU Hristo  Botev",
                            UserId = new Guid("d35e9b04-d31b-40f6-8d0d-da225a969421")
                        });
                });

            modelBuilder.Entity("SchoolFoodStamps.Data.Models.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Student identifier");

                    b.Property<string>("ClassLetter")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasComment("Student class letter in school");

                    b.Property<byte>("ClassNumber")
                        .HasColumnType("tinyint")
                        .HasComment("Student class number in school");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasComment("Student date of birth");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Student first name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Is active");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Student last name");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Parent identifier");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("School identifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Students");

                    b.HasComment("Child table");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1abc1d5-3718-4639-ab42-d7a1e9a0fcb0"),
                            ClassLetter = "B",
                            ClassNumber = (byte)3,
                            DateOfBirth = new DateTime(2010, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "John",
                            IsActive = true,
                            LastName = "Doe",
                            ParentId = new Guid("63281334-434e-4327-b1b7-84b32a9d3d82"),
                            SchoolId = new Guid("e3af4b8e-8f07-4962-838e-670bd305758f")
                        },
                        new
                        {
                            Id = new Guid("49d7ed09-30b0-4b52-b3d4-b2c7c318ccd1"),
                            ClassLetter = "A",
                            ClassNumber = (byte)1,
                            DateOfBirth = new DateTime(2012, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Jane",
                            IsActive = true,
                            LastName = "Doe",
                            ParentId = new Guid("63281334-434e-4327-b1b7-84b32a9d3d82"),
                            SchoolId = new Guid("e3af4b8e-8f07-4962-838e-670bd305758f")
                        },
                        new
                        {
                            Id = new Guid("69d5eefd-e902-4706-8bd8-b523bb24b9b6"),
                            ClassLetter = "B",
                            ClassNumber = (byte)1,
                            DateOfBirth = new DateTime(2014, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Jack",
                            IsActive = true,
                            LastName = "Doe",
                            ParentId = new Guid("fec4e958-bf56-4247-a6c8-51fae40d852d"),
                            SchoolId = new Guid("6cd00c11-b0cb-428a-9143-df5743105a92")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolFoodStamps.Data.Models.AllergenDish", b =>
                {
                    b.HasOne("SchoolFoodStamps.Data.Models.Allergen", "Allergen")
                        .WithMany("AllergensDishes")
                        .HasForeignKey("AllergenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolFoodStamps.Data.Models.Dish", "Dish")
                        .WithMany("AllergensDishes")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Allergen");

                    b.Navigation("Dish");
                });

            modelBuilder.Entity("SchoolFoodStamps.Data.Models.CateringCompany", b =>
                {
                    b.HasOne("ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SchoolFoodStamps.Data.Models.Dish", b =>
                {
                    b.HasOne("SchoolFoodStamps.Data.Models.CateringCompany", "Company")
                        .WithMany("Dishes")
                        .HasForeignKey("CateringCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("SchoolFoodStamps.Data.Models.DishMenu", b =>
                {
                    b.HasOne("SchoolFoodStamps.Data.Models.Dish", "Dish")
                        .WithMany("DishesMenus")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolFoodStamps.Data.Models.Menu", "Menu")
                        .WithMany("DishesMenus")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("SchoolFoodStamps.Data.Models.FoodStamp", b =>
                {
                    b.HasOne("SchoolFoodStamps.Data.Models.CateringCompany", "CateringCompany")
                        .WithMany("FoodStamps")
                        .HasForeignKey("CateringCompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolFoodStamps.Data.Models.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolFoodStamps.Data.Models.Parent", "Parent")
                        .WithMany("FoodStamps")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolFoodStamps.Data.Models.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolFoodStamps.Data.Models.Student", "Student")
                        .WithMany("FoodStamps")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CateringCompany");

                    b.Navigation("Menu");

                    b.Navigation("Parent");

                    b.Navigation("School");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolFoodStamps.Data.Models.Menu", b =>
                {
                    b.HasOne("SchoolFoodStamps.Data.Models.CateringCompany", "Company")
                        .WithMany("Menus")
                        .HasForeignKey("CateringCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("SchoolFoodStamps.Data.Models.Parent", b =>
                {
                    b.HasOne("ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SchoolFoodStamps.Data.Models.School", b =>
                {
                    b.HasOne("SchoolFoodStamps.Data.Models.CateringCompany", "Company")
                        .WithMany("Schools")
                        .HasForeignKey("CateringCompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SchoolFoodStamps.Data.Models.Student", b =>
                {
                    b.HasOne("SchoolFoodStamps.Data.Models.Parent", "Parent")
                        .WithMany("Students")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolFoodStamps.Data.Models.School", "School")
                        .WithMany("Students")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("School");
                });

            modelBuilder.Entity("SchoolFoodStamps.Data.Models.Allergen", b =>
                {
                    b.Navigation("AllergensDishes");
                });

            modelBuilder.Entity("SchoolFoodStamps.Data.Models.CateringCompany", b =>
                {
                    b.Navigation("Dishes");

                    b.Navigation("FoodStamps");

                    b.Navigation("Menus");

                    b.Navigation("Schools");
                });

            modelBuilder.Entity("SchoolFoodStamps.Data.Models.Dish", b =>
                {
                    b.Navigation("AllergensDishes");

                    b.Navigation("DishesMenus");
                });

            modelBuilder.Entity("SchoolFoodStamps.Data.Models.Menu", b =>
                {
                    b.Navigation("DishesMenus");
                });

            modelBuilder.Entity("SchoolFoodStamps.Data.Models.Parent", b =>
                {
                    b.Navigation("FoodStamps");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("SchoolFoodStamps.Data.Models.School", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("SchoolFoodStamps.Data.Models.Student", b =>
                {
                    b.Navigation("FoodStamps");
                });
#pragma warning restore 612, 618
        }
    }
}
