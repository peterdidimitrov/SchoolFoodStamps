@model AllStudentsQueryModel;

@{
    ViewBag.Title = "Search for students who signed up for food stamps in your school.";
}

<h2 class="text-center">@ViewBag.Title</h2>
<hr />

<form method="get">
    <div class="row">

        <div class="form-group col-md-2">
            <label asp-for="StudentsPerPage"></label>
            <select asp-for="StudentsPerPage" class="form-control">
                <option value="10"></option>
                <option value="1">1</option>
                <option value="3">3</option>
                <option value="6">6</option>
                <option value="9">9</option>
            </select>
        </div>

        <div class="form-group col-md-2">
            <label asp-for="Name"></label>
            <input asp-for="Name" class="form-control" placeholder="...">
        </div>

        <div class="form-group col-md-2">
            <label asp-for="ClassNumber"></label>
            <select asp-for="ClassNumber" class="form-control">
                <option value=""></option>
                @for (int i = 1; i <= 12; i++)
                {
                    <option value="@i">@i</option>
                }
            </select>
        </div>

        <div class="form-group col-md-2">
            <label asp-for="ClassLetter"></label>
            <select asp-for="ClassLetter" class="form-control">
                <option value=""></option>
                @foreach (ClassLetter letter in Enum.GetValues(typeof(ClassLetter)))
                {
                    <option value="@letter">@letter</option>
                }
            </select>
        </div>

        <div class="form-group col-md-2">
            <div class="form-group">
                <label asp-for="StudentSorting"></label>
                <select asp-for="StudentSorting" class="form-control">
                    @{
                        int enumCount = Enum.GetValues(typeof(StudentSorting)).Length;

                        for (int i = 0; i < enumCount - 1; i++)
                        {
                            StudentSorting sort = (StudentSorting)Enum.GetValues(typeof(StudentSorting)).GetValue(i)!;
                            <option value="@sort">@Html.DisplayFor(FoodStampSorting => sort)</option>
                        }
                    }
                </select>
            </div>
        </div>

        <div class="col-md-2 mb-4">
            <div class="form-group mt-4">
                <input type="submit" value="Search" class="btn btn-primary" />
            </div>
        </div>
    </div>
</form>


@{
    int previousPage = Model.CurrentPage - 1;
    if (previousPage < 1)
    {
        previousPage = 1;
    }

    int maxPage = (int)Math.Ceiling((double)Model.TotalStudents /
        Model.StudentsPerPage);
}

@if (Model.Students.Any())
{
    <div class="d-flex justify-content-between mt-4 mb-4">
        <div class="fill flex">
            <a class="btn btn-primary @(Model.CurrentPage == 1 ? "disabled" : string.Empty)"
               asp-controller="Student"
               asp-action="Index"
               asp-route-currentPage="@previousPage"
               asp-route-studentsPerPage="@Model.StudentsPerPage"
               asp-route-searchTerm="@Model.Name"
               asp-route-classNumber="@Model.ClassNumber"
               asp-route-classLetter="@Model.ClassLetter"
               asp-route-sorting="@((int)Model.StudentSorting)">&lt;&lt;</a>
        </div>


        <div class="fill flex">
            <h5 class="text-center">Page: @Model.CurrentPage of @maxPage</h5>
        </div>


        @{
            bool shouldNextPageBeDisabled = Model.CurrentPage == maxPage;
        }

        <div class="fill flex">
            <a class="btn btn-primary
           @(shouldNextPageBeDisabled ? "disabled" : string.Empty)"
               asp-controller="Student"
               asp-action="Index"
               asp-route-currentPage="@(Model.CurrentPage + 1)"
               asp-route-studentsPerPage="@Model.StudentsPerPage"
               asp-route-searchTerm="@Model.Name"
               asp-route-classNumber="@Model.ClassNumber"
               asp-route-classLetter="@Model.ClassLetter"
               asp-route-sorting="@((int)Model.StudentSorting)">&gt;&gt;</a>
        </div>
    </div>
}

@if (Model.TotalStudents < 1)
{
    <h4 class="text-center">No students found by the given criteria!</h4>
}
else if (Model.TotalStudents == 1)
{
    <h4 class="text-center">There is only @Model.TotalStudents student found by the given criteria.</h4>
}
else
{
    <h4 class="text-center">There are @Model.TotalStudents students found by the given criteria.</h4>
}

<table class="table mt-4">
    <thead>
        <tr>
            <th>Student Name</th>
            <th>Student Class</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var student in Model.Students)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => student.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => student.StudentClass)
                </td>
                <td>
                    <a asp-controller="FoodStamp" asp-action="AllFoodStampsByStudent" asp-route-id="@student.Id" class="btn btn-secondary">View Food Stamps</a>
                </td>
            </tr>
        }
    </tbody>
</table>