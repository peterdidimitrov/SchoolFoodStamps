name: CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  AZURE_RESOURCE_GROUP: schoolfoodstamps-rg
  AZURE_CONTAINER_NAME: schoolfoodstamps-app
  AZURE_LOCATION: northeurope
  DOCKER_IMAGE_NAME: ogmos/schoolfoodstamps-app

permissions:
  id-token: write
  contents: read

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      has_changes: ${{ steps.check-app-changes.outputs.has_changes }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check for changes in application code
        id: check-app-changes
        run: |
          if [ $(git rev-list --count HEAD) -eq 1 ] || ! git diff --quiet HEAD^ HEAD -- ./SchoolFoodStampsApplication; then
            echo "has_changes=1" | tee -a $GITHUB_ENV $GITHUB_OUTPUT
          else
            echo "has_changes=0" | tee -a $GITHUB_ENV $GITHUB_OUTPUT
          fi

      - name: Cache .NET dependencies
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-dotnet-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-dotnet-

      - name: Setup .NET
        if: ${{ steps.check-app-changes.outputs.has_changes == '1' }}
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      - name: Restore dependencies
        if: ${{ steps.check-app-changes.outputs.has_changes == '1' }}
        run: dotnet restore --packages ~/.nuget/packages SchoolFoodStampsApplication.sln
        working-directory: ./SchoolFoodStampsApplication

      - name: Build application
        if: ${{ steps.check-app-changes.outputs.has_changes == '1' }}
        run: dotnet build SchoolFoodStampsApplication.sln --configuration Release --no-restore
        working-directory: ./SchoolFoodStampsApplication

      - name: Run unit tests
        if: ${{ steps.check-app-changes.outputs.has_changes == '1' }}
        run: dotnet test SchoolFoodStampsApplication.sln --configuration Release --no-restore --verbosity normal
        working-directory: ./SchoolFoodStampsApplication

  build-and-push-docker:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: ${{ needs.build-and-test.outputs.has_changes == '1' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Replace placeholder in appsettings.json
        run: |
          export AZURE_SQL_CONNECTIONSTRING="${{ secrets.AZURE_SQL_CONNECTIONSTRING }}"
          envsubst < SchoolFoodStampsApplication/SchoolFoodStamps.Web/appsettings.json > SchoolFoodStampsApplication/SchoolFoodStamps.Web/appsettings.json.tmp
          mv SchoolFoodStampsApplication/SchoolFoodStamps.Web/appsettings.json.tmp SchoolFoodStampsApplication/SchoolFoodStamps.Web/appsettings.json
        shell: bash

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.TF_VAR_DOCKERHUB_USERNAME }}
          password: ${{ secrets.TF_VAR_DOCKERHUB_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./SchoolFoodStampsApplication
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE_NAME }}:latest
            ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

  deploy-to-azure:
    needs: build-and-push-docker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure OIDC Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          allow-no-subscriptions: true

      - name: Create or Update Azure Container Instance
        run: |
          az container create \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.AZURE_CONTAINER_NAME }} \
            --image ${{ env.DOCKER_IMAGE_NAME }}:latest \
            --location ${{ env.AZURE_LOCATION }} \
            --os-type Linux \
            --cpu 0.5 \
            --memory 1.5 \
            --ports 80 443 \
            --dns-name-label ${{ env.AZURE_CONTAINER_NAME }} \
            --restart-policy Always \
            --registry-login-server index.docker.io \
            --registry-username "${{ secrets.TF_VAR_DOCKERHUB_USERNAME }}" \
            --registry-password "${{ secrets.TF_VAR_DOCKERHUB_PASSWORD }}" \
            --environment-variables "ConnectionStrings__DefaultConnection=${{ secrets.AZURE_SQL_CONNECTIONSTRING }}"